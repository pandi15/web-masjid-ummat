{"version":3,"sources":["components/utils/HeaderComponent.js","components/Layout.js","views/home/index.js","components/utils/TitleComponent.js","router/middleware.js","router/index.js","App.js","serviceWorker.js","store/index.js","index.js","assets/images/mosque.svg"],"names":["HeaderComponent","className","to","PureComponent","Layout","children","this","props","Home","src","mosqueImage","alt","TitleComponent","title","PublicRoute","Component","component","rest","render","router","exact","path","App","Boolean","window","location","hostname","match","rooterReducers","combineReducers","form","formReducer","options","timeout","position","positions","BOTTOM_CENTER","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"2SAkCeA,E,iLA7BX,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,eACA,yBAAKD,UAAU,4BACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,aAIN,yBAAKD,UAAU,eACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBAAvB,gB,GAvBkBE,iBCafC,E,iLAXF,IACDC,EAAaC,KAAKC,MAAlBF,SACR,OACE,oCACE,kBAAC,EAAD,MACEA,O,GANWF,iB,iBCiCNK,E,iLA7BX,OACE,oCACE,kBAAC,EAAD,KACE,yBAAKP,UAAU,UACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,SAAf,qCACA,yBAAKA,UAAU,eAAf,0JAEF,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBAAvB,wBAGJ,yBAAKA,UAAU,sBACb,yBAAKQ,IAAKC,IAAaC,IAAI,sB,GAnB5BR,iB,iCCMJS,EATQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAExB,OACE,kBAAC,IAAD,KACE,+BAAQA,GAHO,kBC8CrB,SAASC,EAAT,GAAiE,IAA9BC,EAA6B,EAAxCC,UAAsBH,EAAkB,EAAlBA,MAAUI,EAAQ,qCAC9D,OACE,kBAAC,IAAD,iBAAWA,EAAX,CACEC,OAAQ,SAACX,GAAD,OACN,oCACE,kBAAC,EAAD,CAAgBM,MAAOA,IACvB,kBAACE,EAAcR,QClDzB,IAUeY,EAVA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACL,EAAD,CAAaM,OAAK,EAACC,KAAK,IAAIL,UAAWR,EAAMK,MAAM,YCG5CS,MANf,WACE,OACE,kBAAC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCXSC,EAJQC,0BAAgB,CACrCC,KAAMC,MCUFC,EAAU,CACdC,QAAS,IACTC,SAAUC,IAAUC,eAGhBC,EAAQC,sBACZC,EACAC,8BAAoBC,0BAAgBC,OAGtCC,IAASzB,OACP,kBAAC,IAAD,CAAUmB,MAAOA,GACf,kBAAC,IAAD,eAAeO,SAAUC,KAAmBb,GAC1C,kBAAC,EAAD,QAGJc,SAASC,eAAe,SFqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBGrInBC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.3cb36990.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass HeaderComponent extends PureComponent {\n  render () {\n    return (\n      <nav className=\"navbar main-navbar\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to=\"#\">MasjidUmmat</Link>\n          <div className=\"navbar-menu ml-auto mr-5\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <Link to=\"#\">Menu 1</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to=\"#\">Menu 2</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to=\"#\">Menu 3</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to=\"#\">Menu 4</Link>\n              </li>\n            </ul>\n          </div>\n          <div className=\"navbar-menu\">\n            <Link to=\"#\" className=\"btn btn-main\">Masuk</Link>\n          </div>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default HeaderComponent\n","import React, { PureComponent } from 'react'\n\nimport HeaderComponent from './utils/HeaderComponent'\n\nclass Layout extends PureComponent {\n  render () {\n    const { children } = this.props\n    return (\n      <>\n        <HeaderComponent />\n        { children }\n      </>\n    )\n  }\n}\n\nexport default Layout\n","import React, { PureComponent } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Layout from 'components/Layout'\nimport mosqueImage from '../../assets/images/mosque.svg'\n\nclass Home extends PureComponent {\n  render () {\n    return (\n      <>\n        <Layout>\n          <div className=\"header\">\n            <div className=\"header-content\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-4\">\n                    <div className=\"header-text main-text\">\n                      <div className=\"title\">Segera Hadir Aplikasi MasjidUmmat</div>\n                      <div className=\"description\">Satukan ummat dengan memakmurkan masjid, kelola dan bagikan berbagai kegiatan mesjid kita dengan mudah, temukan berbagai kegiatan mesjid dengan mudah</div>\n                    </div>\n                    <div className=\"mt-5\">\n                      <Link to=\"#\" className=\"btn btn-main\">Bergabung Sekarang</Link>\n                    </div>\n                  </div>\n                  <div className=\"col-8 header-image\">\n                    <img src={mosqueImage} alt=\"Masjid\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Layout>\n      </>\n    )\n  }\n}\n\nexport default Home\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nconst TitleComponent = ({ title }) => {\n  let defaultTitle = 'Masjid Ummat'\n  return (\n    <Helmet>\n      <title>{title || defaultTitle}</title>\n    </Helmet>\n  )\n}\n\nexport default TitleComponent\n","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\nimport { getUserToken } from 'services/utils/storage'\nimport TitleComponent from '../components/utils/TitleComponent'\n\nfunction PrivateRoute ({ component: Component, title, ...rest }) {\n  let login = getUserToken()\n  return (\n    <Route\n      {...rest}\n      render={(props) => (login ? (\n        <>\n          <TitleComponent title={title} />\n          <Component {...props} />\n        </>\n      ) : (\n        <Redirect\n          to={{\n            pathname: '/login',\n            state: { from: props.location }\n          }}\n        />\n      ))}\n    />\n  )\n}\n\nfunction AuthRoute ({ component: Component, title, ...rest }) {\n  let login = getUserToken()\n  return (\n    <Route\n      {...rest}\n      render={(props) => (!login ? (\n        <>\n          <TitleComponent title={title} />\n          <Component {...props} />\n        </>\n      ) : (\n        <Redirect\n          to={{\n            pathname: '/',\n            state: { from: props.location }\n          }}\n        />\n      ))}\n    />\n  )\n}\n\nfunction PublicRoute ({ component: Component, title, ...rest }) {\n  return (\n    <Route {...rest}\n      render={(props) => (\n        <>\n          <TitleComponent title={title} />\n          <Component {...props} />\n        </>\n      )}\n    />\n  )\n}\n\nexport {\n  PrivateRoute,\n  AuthRoute,\n  PublicRoute\n}\n","import React from 'react'\nimport { Switch, HashRouter } from 'react-router-dom'\nimport Home from 'views/home'\nimport { PublicRoute } from './middleware'\n\n\nconst router = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <PublicRoute exact path=\"/\" component={Home} title=\"Home\" />\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default router\n","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/css/main.css'\n\nimport Router from './router'\n\nfunction App () {\n  return (\n    <Router />\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\n\nconst rooterReducers = combineReducers({\n  form: formReducer\n})\n\nexport default rooterReducers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport reducer from './store'\n\nconst options = {\n  timeout: 5000,\n  position: positions.BOTTOM_CENTER\n}\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/mosque.83bcbaf6.svg\";"],"sourceRoot":""}